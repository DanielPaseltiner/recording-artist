#pragma rtGlobals=1		// Use modern global access method.#pragma Version = 3.1		// Last Modified: Aug 15 2007 - for new version of TCU_3#pragma IgorVersion = 5#include "TabControlUtil"// Functions to make a GUI to help in creating a database for managing tabcontrols using TabControlProc3//******************************************************************************************************Menu "Macros"	"Manage TabControl Databases",  TCU_Manage()end//******************************************************************************************************//Makes a control panel to help manage tab controlsFunction TCU_Manage()	// make sure packages folder and global variables exist	if (!DatafolderExists ("root:packages:"))		newdatafolder root:packages	endif	if (!DatafolderExists ("root:packages:TCU:"))		newdatafolder root:packages:TCU		// Wave for list of controls on the selected panel		make/t/n= (0,3) root:packages:tcu:control_list		WAVE Control_List = root:packages:tcu:control_list		SetDimLabel 1,0,Name,control_list		SetDimLabel 1,1,Type,control_list		SetDimLabel 1,2,Assigned_To,control_list		//waves for the list of tabs on the selected tabControl		make/o/t/n= 0  root:packages:tcu:Tab_list		make/o/n = 0 root:packages:TCU:tab_listSelWave		// wave for the database list		make/o/T/n = (0,2) root:packages:TCU:DataBase	endif	// Try to Bring Panel to front - exit if panel already exists	DoWindow/F TabControl_Manager	if (V_Flag == 1)		return -1	endif	// Make the panel	NewPanel /K=1 /W=(417,144,1247,491) as "TabControl Manager"	dowindow/C TabControl_Manager	ModifyPanel fixedSize=1	//Choose a panel	PopupMenu PanelPopup,pos={6,4},size={151,20},proc=TCU_PanelPopUpProc,title="Choose Panel"	PopupMenu PanelPopup,fSize=12, help = {"Select a control panel whose tabControls you wish to manage."}	PopupMenu PanelPopup,mode=2,value= #"WinList(\"*\", \";\", \"WIN:64\" ) + WinList(\"*\", \";\", \"WIN:1\" )"	// Lists all controls on chosen panel	ListBox controlList,pos={7,29},size={325,282},proc=TCU_controlList_proc	ListBox controlList,listWave=root:packages:TCU:control_list,mode= 1	ListBox controlList,widths= {120,80,105}, help = {"Lists all the controls on the selected control panel, and the tabControls to which they are currently assigned."}	//Popup menu to sort controls	PopupMenu SortControlPopup,pos={9,316},size={117,20},proc=TCU_SortControlsProc,title="Sort Control List"	PopupMenu SortControlPopup,mode=0,value= #"\"by Control Name;by Control Type;by Assigned Tab Control;\""	PopupMenu SortControlPopup, help = {"Sorts the lists of controls on the slected panel."}	//Group box for tab control selection	GroupBox AddtoDBaseGrp,pos={337,10},size={186,325},title="Settings for Chosen Control"	// Popup to slect a tab control	PopupMenu TabControlPopup,pos={341,35},size={121,20},proc=TCU_TabControlPopUpProc,title="Assign to"	PopupMenu TabControlPopup,fSize=12,value= #"TCU_ListTabs ()"	PopupMenu TabControlPopup,help = {"Shows which tabControl the selected control is assigned to, and allows you to assign it to a new tabControl."}	//Button to make a new tab control	Button NewTabControlButton,pos={348,57},size={139,18},proc=TCU_NewTabControlProc,title="Add New TabControl"	Button NewTabControlButton, help = {"creates a new tabControl on the selected control panel."}	// Title  for information on setting tabs in the tabslist 	TitleBox tabstitle,pos={342,88},size={156,20},title="Show Control for Checked Tabs"	// List box for showing tabs on the selected tabcontrol	ListBox TabList,pos={342,111},size={175,125},listWave=root:packages:TCU:Tab_list	ListBox TabList,selWave=root:packages:TCU:tab_listSelWave,mode= 3	ListBox TabList, help = {"Shows names of all tabs on the seletced tabControl. Check tabs you want control to belong to, and Assign Control to TabControl."}	// Button to make a new tab on the selected tabcontrol	Button NewTabButton,pos={376,238},size={93,20},proc=TCU_NewTabProc,title="Add New Tab"	Button NewTabButton, help = {"Adds a new tab to the selected tab control, with a name of your chosing."}	// Buttons to add and remove controls from the database of controls	Button AddControlButton,pos={342,288},size={178,20},proc=TCU_AddControlProc,title="Assign Control to TabControl"	Button AddControlButton, help = {"Assigns selected control to the selected tabControl; it will be showing when the checked tabs are active."}	Button RemoveControlButton,pos={343,312},size={177,20},proc=TCU_RemoveControlProc,title="Unassign from TabControl"	Button RemoveControlButton, help = {"Removes aselected control from the database of the selected tabControl."}	// Title of currently selected tabControl	TitleBox DBaseTitle,pos={529,0},size={106,20},title="DataBase for Chosen Panel"	//ListBox showing the databases for each tab of currently selected tabcontrol	ListBox DBaseList,pos={527,23},size={297,270}, listWave=root:packages:TCU:DataBase,mode= 0,widths={80,80},userColumnResize=1	//Popup menu to print database to selcted place	PopupMenu PrintDBasePopup,pos={540,295},size={112,20},proc=TCU_PrintDBaseProc,title="Print DBase to:"	PopupMenu PrintDBasePopup,mode=0,value= #"\"ClipBoard;History Window;\" + WinList(\"*\", \";\", \"WIN:16\" )"	PopupMenu PrintDBasePopup, help = {"Prints the database for the selected tabControl as Igor commands that will run in a procedure or from command line."}	// Button to clear the database for a selected tabControl	Button ClearDataBaseButton,pos={678,295},size={98,20},proc=TCU_ClearDataBaseProc,title="Clear DataBase"	Button ClearDataBaseButton, help = {"Clears the database for the selected tabControl."}end//******************************************************************************************************// When a panel is selected, the list of all controls on the panel is updatedFunction TCU_PanelPopUpProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		//Set info to default values	titleBox DBaseTitle title = "Choose a TabControl to see Control List"	GroupBox AddtoDBaseGrp, win = TabControl_Manager,  title="Choose a Control"	//Make list of controls on the panel	string AllControls = ControlNameList(popstr)	variable iControl, nControls = itemsinlist (AllControls)	//Update the listbox of controls by iterating through all controls and checking the database for each control	WAVE/T control_list =  root:packages:tcu:control_list	redimension/N = ((nControls), 3) control_List	control_List = ""	// Make a list of tabControls	string aControl, TabControlList = ""	For (iControl = 0; iControl < nControls; iControl += 1)		aControl = stringfromlist (iControl, AllControls)		controlinfo /W=$popStr $aControl		if (abs (V_FLag) == 8)			TabControlList += aControl + ";"		endif	endfor	variable iTabControl, nTabControls =itemsinList (TabControlList, ";")	string tabList, aTab, aTabControl	variable iTab, nTabs	string aControlList	variable posControl, wavePos	variable foundControl	variable ctrltype	string theTabList	variable iPos, iEnd	// iterate throught the list of tabcontrols seeing which controls are already assigned,	// adding them to the list box and removing them from the string list of all controls	for (wavePos = 0, iTabControl =0; iTabControl < nTabControls; iTabControl += 1)		aTabControl = stringfromlist ( iTabControl, tabControlList)		//Get list of  tabs on the tabcontrol		controlinfo /W =$popStr $aTabControl		theTabList = TCU_GetTabList (S_recreation)		// Check for a database for each tab and check to see which of the controls belong to it		nTabs = itemsinList (theTabList, ";")		for (iTab  = 0; iTab < nTabs; iTab += 1)			aTab = stringFromList (iTab, theTabList, ";")			aControlList = GetUserData(popStr, aTabControl, aTab)			nControls = itemsinList (aControlList, ";")			for (iControl = 0; iControl < nControls; iControl += 1)				aControl = stringfromlist (iControl, aControlList)				posControl = WhichListItem(aControl, AllControls, ";" , 0)				if (posControl != -1)					controlinfo /W=$popStr $aControl					control_List [wavePos] [0]= acontrol					ctrltype = abs (V_FLag)					switch (ctrltype)						case 1:							control_List [wavePos] [1] = "Button"							break						case 2:							control_List [wavePos] [1] = "CheckBox"							break						case 3:							control_List [wavePos] [1] = "PopupMenu"							break						case 4:							control_List [wavePos] [1] = "ValDisplay"							break						case 5:							control_List [wavePos] [1] = "SetVariable"							break						case 6:							control_List [wavePos] [1] = "Chart"							break						case 7:							control_List [wavePos] [1] = "Slider"							break						case 8:							control_List [wavePos] [1] = "TabControl"							break						case 9:							control_List [wavePos] [1] = "GroupBox"							break						case 10:							control_List [wavePos] [1] = "TitleBox"							break						case 11:							control_List [wavePos] [1] = "ListBox"							break						default:							print "The control type, " + num2str ( ctrlType) + ", is unknown to me."							control_List [wavePos] [1] = ""					endswitch					control_List [wavePos] [2] = aTabControl					AllControls = RemoveListItem(posControl, AllControls , ";")					wavePos += 1				endif			endfor		endfor	endfor	//iterate through list of all left-over controls, finishing the listbox wave	nControls = itemsinList (allControls, ";")	for (iControl = 0; iControl < nControls; iControl += 1, wavePos += 1)		aControl = stringFromList (iControl, AllControls)		controlinfo /W=$popStr $aControl		control_List [wavePos] [0]= acontrol		ctrltype = abs (V_FLag)		switch (ctrltype)			case 1:				control_List [wavePos] [1] = "Button"				break			case 2:				control_List [wavePos] [1] = "CheckBox"				break			case 3:				control_List [wavePos] [1] = "PopupMenu"				break			case 4:				control_List [wavePos] [1] = "ValDisplay"				break			case 5:				control_List [wavePos] [1] = "SetVariable"				break			case 6:				control_List [wavePos] [1] = "Chart"				break			case 7:				control_List [wavePos] [1] = "Slider"				break			case 8:				control_List [wavePos] [1] = "TabControl"				break			case 9:				control_List [wavePos] [1] = "GroupBox"				break			case 10:				control_List [wavePos] [1] = "TitleBox"				break			case 11:				control_List [wavePos] [1] = "ListBox"				break			default:				print "The control type, " + num2str ( ctrlType) + ", is unknown to me."				control_List [wavePos] [1] = ""		endswitch		control_List [wavePos] [2] = " not assigned"  //the extra space at beginning will insure these controls are at top of list when sorted by assigned tabcontrol	endfor	return 0	end//******************************************************************************************************// When a control is slected in the listbox, show the tab control and tab(s) to which that control belongs Function TCU_ControlList_proc (ctrlName,row,col,event):ListBoxControl	String ctrlName     // name of this control	Variable row        // row if click in interior, -1 if click in title	Variable col        // column number	Variable event      // event code		if (event == 4)	// making a selection is all we care about		//reference global waves		WAVE/T Control_list = root:Packages:TCU:control_list		WAVE/T Tab_List =root:packages:tcu:Tab_list		WAVE tab_listSelWave = root:packages:TCU:tab_listSelWave		//get info on chosen control		string theControl =  Control_list [row] [0]		string AssignedTo = Control_list [row] [2]		// retitle group box with selected control name		GroupBox AddtoDBaseGrp, win = TabControl_Manager,  title="Settings for " + theControl		// Is control assigned to a tabcontrol?		if ((cmpstr (AssignedTo, " not assigned")) == 0)	// Control is not yet assigned to a tab control, so say so and exit			GroupBox AddtoDBaseGrp, win = TabControl_Manager,  title= theControl + "  not assigned"			return -1		endif		// Set the controls to show what current selections are		//Set "assign to" pop menu to assigned tab control. This also sets the list of tabs and the control list for the tabcontrol		variable selectedTabControl = WhichListItem (AssignedTo, TCU_ListTabs ()) + 1		TCU_TabControlPopUpProc ("", selectedTabControl, AssignedTo)		popupmenu TabControlPopup, win = TabControl_Manager, mode = selectedTabControl		//Find what control panel we are working with		controlinfo /w=TabControl_Manager PanelPopup		string theControlPanel = S_value 		//Check tabs that contain the selected control		variable iTab, nTabs = dimsize (Tab_List, 0)		string aTab, aControlList		for (iTab = 0; iTab < nTabs; iTab += 1)			aTab = Tab_List [iTab] [0]			aControlList =  GetUserData(theControlPanel, AssignedTo, aTab)			if (WhichListItem(theControl, aControlList, ";", 0) > -1)				tab_listSelWave [iTab] = 48			endif		endfor	endifend//******************************************************************************************************//Show the database for a chosen TabControlFunction TCU_ShowDataBase (thePanel, theTabControl)	string thePanel, theTabControl		//Reference to DBase waves	WAVE/T DBListWave = root:packages:TCU:DataBase	//Get list of tabs for the tabcontrol	controlInfo /W=$thePanel $theTabControl	 string theTabList = TCU_GetTabList (S_recreation)	variable iTab, nTabs = itemsinList (theTabList, ";")	redimension/n= (1, nTabs)  DBListWave	DBListWave = ""	string aTab, aControlList	variable iControl, nControls	//Controls on each tab get a separate column in the listbox	for (iTab = 0; iTab < nTabs; iTab += 1)		aTab = stringFromList (iTab, theTabList)		SetDimLabel 1,(iTab),$aTab,DBListWave		aControlList =  GetUserData(thePanel, theTabControl, aTab )		nControls = itemsinList (aControlList, ";")		if (nControls > dimsize (DBListWave, 0))			redimension/n= ((nControls), (nTabs))  DBListWave		endif		for (iControl = 0; iControl < nControls; iControl += 1)			DBListWave [iControl] [iTab] = stringfromlist (iControl, aControlList)		endfor	endforend//******************************************************************************************************//sorts the controls by name, type, or assigned tabcontrolFunction TCU_SortControlsProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		WAVE  ControlList = root:packages:TCU:control_list	SortTextByColumn (ControlList, popnum-1)End//******************************************************************************************************// Sorts a 2D text wave.  All of the columns in the wave are sorted using  the chosen columnFunction SortTextByColumn (thewave, theColumn)	Wave/T thewave	// A 2D text wave we want to sort	variable thecolumn	// The column we want to sort all the columns by		variable numcolumns = (dimsize (thewave, 1)), ii	string Tempwavelist = ""	for (ii = 0; ii < numcolumns; ii += 1)		make/T/o/N = (dimsize (thewave, 0)) $"tempwave_" + num2str (ii)		WAVE/T tempwave = $"tempwave_" + num2str (ii)		tempwave = thewave [p] [ii]		Tempwavelist += ", tempwave_" + num2str (ii) 	endfor	string TempSortwaveName = "tempwave_" + num2str (theColumn)	execute "sort " +  TempSortwaveName + Tempwavelist	for (ii = 0; ii < numcolumns; ii += 1)		WAVE/T tempwave = $"tempwave_" + num2str (ii)		theWave [] [ii] = tempwave [p]		Killwaves/z tempwave	endforend//******************************************************************************************************// Returns a list of tab controls on the current panel, for use in the Tabcontrol popup menuFunction/S TCU_ListTabs ()	ControlInfo /W=TabControl_Manager PanelPopup	string thePanel = S_Value	WAVE/T ControlList = root:packages:TCU:control_List	variable ii, numcntrls = dimsize (ControlList, 0)	string TabList = ""	controlinfo /w = TabControl_Manager controlList	if ((cmpstr (ControlList [V_Value] [1], "TabControl")) == 0)		string SelectedControl = ControlList [V_Value] [0]		For (ii = 0; ii < numcntrls; ii += 1)			if ((cmpstr (ControlList [ii] [1], "TabControl"))  ==0)				if ((cmpstr (SelectedControl, ControlList [ii] [0])) != 0)					TabList +=  ControlList [ii] [0] + ";"				endif			endif		endfor	else		For (ii = 0; ii < numcntrls; ii += 1)			if ((cmpstr (ControlList [ii] [1], "TabControl"))  ==0)				TabList +=  ControlList [ii] [0] + ";"			endif		endfor	endif	return TabListend//******************************************************************************************************//Adds/Modifies an entry for a control in the list of controls controlled by the chosen tab by getting values from panel and calling addtoListFunction TCU_AddControlProc(ctrlName) : ButtonControl	String ctrlName		//Reference waves	WAVE/T TabList = root:Packages:TCU:Tab_list	WAVE TabListSel = root:Packages:TCU:tab_listSelWave	WAVE/T Control_list = root:Packages:TCU:control_list	// What panel are we adding/modifying an item?	controlinfo /w = TabControl_Manager PanelPopup	string theCurrentPanel = S_Value	// What Tab control are we modifying?	controlinfo /w = TabControl_Manager TabControlPopup	string TheCurrentTabControl = S_Value	//What control are we adding?	controlinfo /W =TabControl_Manager controlList	string theControlName = Control_list [V_Value] [0]	string showfortabsList = ""	//make a list of tabs that control belongs to	variable nTabs = dimsize (TabList, 0), iTab	for (iTab = 0; iTab < nTabs; iTab += 1)		if (TabListSel [iTab] == 48)		showfortabsList += TabList [iTab] + ";"		endif	endfor	// Set the databse in the tab control	TCU3_SetList (theCurrentPanel, theCurrentTabcontrol, theControlName, showfortabsList)	//Update the control status in the control list	Control_list [V_Value] [2] = TheCurrentTabControl	groupbox AddtoDBaseGrp title = "Settings for " + theControlName	// show in the datbase list	TCU_ShowDataBase (theCurrentPanel, theCurrentTabcontrol)End//******************************************************************************************************//Removes a control from the database for a particular tab controlFunction TCU_RemoveControlProc(ctrlName) : ButtonControl	String ctrlName		//Reference waves	WAVE TabListSel = root:Packages:TCU:tab_listSelWave	WAVE/T TabList = root:Packages:TCU:Tab_list	WAVE/T Control_list = root:Packages:TCU:control_list	// What panel are we adding/modifying an item?	controlinfo /w = TabControl_Manager PanelPopup	string theCurrentPanel = S_Value	// What Tab control are we modifying?	controlinfo /w = TabControl_Manager TabControlPopup	string TheCurrentTabControl = S_Value	//What control are we removing?	controlinfo /W =TabControl_Manager controlList	string theControlName = Control_list [V_Value] [0]	// Remove from the databse in the tab control	TCU3_SetList (theCurrentPanel, theCurrentTabcontrol, theControlName, "")	//Update the control status in the control list	Control_list [V_Value] [2] = " not assigned"	groupbox AddtoDBaseGrp title = theControlName + " not assigned"	// show in the datbase list	TCU_ShowDataBase (theCurrentPanel, theCurrentTabcontrol)End//******************************************************************************************************//Adds a new Tab control to the  current panelFunction TCU_NewTabControlProc(ctrlName) : ButtonControl	String ctrlName		controlinfo /w= TabControl_Manager PanelPopup	string thepanel = S_Value	string newTabcontrolName, NewTabName	Prompt newTabName, "Name for First Tab:" 	Prompt newTabcontrolName, "New TabControl:" 	DoPrompt "Give the New TabControl a Name", newTabcontrolName, newTabName	if (V_Flag == 1)		return -1	endif	newTabcontrolName = CleanupName(newTabcontrolName, 0 )	newTabName = CleanupName(newTabName, 0 )	TabControl $newTabcontrolName , proc=TCU3_TabProc, win= $S_Value, tabLabel(0)= newTabName	TCU_PanelPopUpProc("",V_Value,S_value)	TCU_TabControlPopUpProc("", WhichListItem(newTabcontrolName, TCU_ListTabs ()) + 1 ,newTabcontrolName)End//******************************************************************************************************// Prints the DataBase for the current tabControlFunction TCU_PrintDBaseProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		controlinfo /w= TabControl_Manager PanelPopup	string thepanel = S_Value	controlinfo/W=TabControl_Manager TabControlPopup	string theTabControl = S_Value		WAVE/T DataBase = root:packages:TCU:DataBase	variable iTab, nTabs = dimsize (DataBase, 1)	string theTab	variable iLine, nLines	variable CharWid = 180	//Could be up to 400 but I find this a convenient width	variable lastBreak	variable nControls, iControl	string aControl, dbStr, tempStr, bigStr = ""	for (iTab = 0; iTab < nTabs; iTab += 1)		theTab =  GetDimLabel (DataBase, 1, (iTab) )		nLines = dimsize (DataBase, 0)		string DBaseStr = ""		sprintf dbStr "tabcontrol %s, win = %s, UserData (%s) = \"", theTabcontrol, thePanel, theTab		for (iLine = 0,lastBreak = 0; iLine < nLines; iLine += 1)			aControl = DataBase [iLine] [iTab]			if ((cmpstr (aControl, "")) == 0)				break			endif			if  ((strlen (dbStr + acontrol) - lastBreak) > CharWid) //start a new line				lastBreak = strlen (dbStr)				sprintf tempStr "\"\rtabcontrol %s, win = %s, UserData (%s) += \"%s;", theTabcontrol, thePanel, theTab, aControl				dbStr += tempstr			else				dbStr += aControl + ";"			endif		endfor		//close off the control list		dbStr += "\"\r"		bigStr += dbStr	endfor	// Print the big string to the required place	strswitch (popStr)		case "History Window":			print bigStr			break		case  "ClipBoard":			PutScrapText bigStr			break		default:			Notebook $popStr, text = bigStr	endswitchend//******************************************************************************************************//Sets other controls to dislay correct info on chosen tabcontrolFunction TCU_TabControlPopUpProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	// the name of the tab control we are currently working with	WAVE/T TabList = root:Packages:TCU:Tab_list	WAVE TabListSel = root:Packages:TCU:tab_listSelWave	redimension/n = 0 TabList, Tablistsel		// What is the current panel?	controlinfo /W=TabControl_Manager PanelPopup	string thePanel = S_Value	// Get info on the current tabcontrol  in the current panel	controlinfo/W = $thePanel $popstr	string theTabList = TCU_GetTabList (S_recreation)	variable iTab, nTabs = itemsinList (theTabList)	for (iTab = 0; iTab < nTabs; iTab += 1)		insertpoints iTab, 1, Tablist, tablistsel		TabList [iTab] = stringfromList (iTab, theTabList)		TabListSel [iTab] = 32	Endfor	TCU_ShowDataBase (thePanel, popStr)	titlebox DBaseTitle, title = "control List for " + popStrend//******************************************************************************************************//Makes a new tab for the currently selected tabcontrolFunction TCU_NewTabProc(ctrlName) : ButtonControl	String ctrlName		//Find out what panel we are working with	controlinfo /w= TabControl_Manager PanelPopup	string thepanel = S_Value	// Find out what tabControl is selected	controlinfo /W=TabControl_Manager TabControlPopup	string theTabControl = S_Value	// Prompt for new tab name	string newTabName	Prompt newTabName, "New Tab:" 	DoPrompt "Give the New Tab a Name", newTabName	if (V_Flag == 1)		return -1	endif	//Add the new tab	TCU3_AddTab (thePanel, theTabControl, newTabName)	// adjust the controls to reflect new tab	TCU_TabControlPopUpProc("", WhichListItem(theTabControl, TCU_ListTabs ()) + 1 ,theTabControl)End//******************************************************************************************************//Clears the database for the currently selected tabControlFunction TCU_ClearDataBaseProc(ctrlName) : ButtonControl	String ctrlName		WAVE/T DataBase = root:packages:TCU:DataBase	// Find out what panel we are working with	controlinfo PanelPopUp	string thePanel = S_Value	// Find out what tabControl is selected	controlinfo /W=TabControl_Manager TabControlPopup	string theTabControl = S_value	string theTab	variable iTab, nTabs = DimSize (Database, 1)	// Kill the database in the tabcontrol	for (iTab = 0; iTab < nTabs; iTab += 1)		theTab =  GetDimLabel (DataBase, 1, (iTab) )		tabcontrol $theTabControl, win=$thePanel, UserData ($theTab) =""	endfor	//kill the database in the control panel	redimension /n = (0,0) DataBase	//update the control list of assigned controls	WAVE/T ControlList = root:packages:TCU:control_list	variable iPnt, nPnts = numpnts (ControlList)	for (iPnt = 0; iPnt < nPnts; iPnt += 1)		if ((cmpstr (ControlList [iPnt], theTabControl)) == 0)			ControlList [iPnt] = " not assigned"		endif	endfor	//Adjust some controls	titlebox DBaseTitle, title = ""	WAVE/T TabList = root:Packages:TCU:Tab_list	WAVE TabListSel = root:Packages:TCU:tab_listSelWave	redimension/n = 0 TabList, Tablistselend